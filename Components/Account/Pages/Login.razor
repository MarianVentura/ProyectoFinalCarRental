@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProyectoFinalCarRental.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="d-flex justify-content-center align-items-center" style="height: 90vh; font-family: 'Poppins', sans-serif;">
    <div class="col-md-6">
        <div class="card shadow-lg" style="background-color: var(--primary-color);">
            <div class="card-body p-5">
                <h2 class="card-title text-center mb-4 text-white">Login</h2>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="form-floating mb-3">
                        <div class="input-group">
                            <span class="input-group-text" style="background-color: var(--accent-color); color: white;">
                                <i class="bi bi-person"></i>
                            </span>
                            <InputText @bind-Value="Input.Email" class="form-control" style="border: 1px solid gray;" autocomplete="username" aria-required="true" placeholder="Correo electronico" />
                        </div>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <div class="input-group">
                            <span class="input-group-text" style="background-color: var(--accent-color); color: white;">
                                <i class="bi bi-lock"></i>
                            </span>
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" style="border: 1px solid gray;" autocomplete="current-password" aria-required="true" placeholder="Contraseña" />
                        </div>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        <label class="form-check-label text-white" for="rememberMe">Remember me</label>
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn" style="background-color: var(--accent-color); color: white;">
                            <i class="fa-solid fa-paper-plane"></i> Iniciar Sesion
                        </button>
                    </div>
                </EditForm>

                <div class="text-left mt-3">
                    <a href="Account/ForgotPassword" class="text-dark">Forgot your password?</a><br />
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-dark">Register as a new user</a><br />
                    <a href="Account/ResendEmailConfirmation" class="text-dark">Resend email confirmation</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #1c3144; /* Color principal */
        --secondary-color: #d00000; /* Rojo para alertas o elementos destacados */
        --accent-color: #ffba08; /* Amarillo para resaltar elementos */
        --light-gray: #a2aebb; /* Gris claro para fondos o texto secundario */
        --blue-light: #3f88c5; /* Azul para elementos interactivos o botones */
    }

    .card {
        border: none; /* Eliminar los bordes de la tarjeta */
    }

    .input-group-text {
        border: 1px solid gray; /* Borde de los iconos */
        background-color: var(--accent-color); /* Fondo del icono */
        color: white; /* Color del icono */
    }

    .form-control {
        border: 1px solid gray; /* Borde de los campos de entrada */
    }

    .form-floating .form-control {
        border-radius: 0.25rem; /* Bordes redondeados */
    }

    .form-label {
        color: var(--light-gray); /* Color de las etiquetas */
    }

    .text-dark {
        color: var(--blue-light) !important; /* Color de los enlaces */
    }

    .btn {
        background-color: var(--accent-color);
        color: white;
        border: none;
    }

        .btn:hover {
            background-color: var(--primary-color); /* Cambiar el fondo del botón al pasar el cursor */
        }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
            // Redirigir a los usuarios según su correo y rol
            if (Input.Email == "Admin123@gmail.com")
            {
                NavigationManager.NavigateTo("/Index/Admin");
            }
            else if (Input.Email == "Client123@gmail.com")
            {
                NavigationManager.NavigateTo("/Index/Clientes");
            }
            else
            {
                // Redirigir a clientes no administradores
                NavigationManager.NavigateTo("/Index/Clientes");
            }

        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}